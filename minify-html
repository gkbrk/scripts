#!/usr/bin/env python3
from pathlib import Path
import json
import subprocess
import sys

from bs4 import BeautifulSoup, NavigableString, Comment


def sassc(css: str) -> str:
    """Minify CSS using the sassc compiler.

    Parameters
    ----------
    css : str
        The CSS to minify.

    Returns
    -------
    str
        The minified CSS.
    """
    cmd = ["sassc", "-t", "compressed", "-s"]
    css_buf = css.encode("utf-8")
    return subprocess.check_output(cmd, input=css_buf).decode("utf-8").strip()


def out(f, *t):
    for x in t:
        f.write(x)


def htmlentities(text: str) -> str:
    """Convert special characters to HTML entities."""
    text = text.replace("&", "&amp;")
    text = text.replace("<", "&lt;")
    text = text.replace(">", "&gt;")
    return text


def output_elem(f, tag, ws=False, escape=False):
    if isinstance(tag, Comment):
        return
    if isinstance(tag, NavigableString):
        s = tag.string

        if escape:
            s = htmlentities(s)
        if ws:
            out(f, s)
            return

        s = s.replace("\n", " ")

        new = ""
        while new != s:
            new = s
            s = new.replace("  ", " ")
        out(f, new)
        return

    out(f, "<", tag.name)

    for attr in sorted(tag.attrs):
        x = tag.attrs[attr]
        if isinstance(x, list):
            x = " ".join(x)
        if attr == "style":
            x = f".c {{ {x} }}"
            x = sassc(x)
            x = x.rstrip("}")
            x = x.rstrip(";")
            x = x.lstrip(".c")
            x = x.lstrip(" ")
            x = x.lstrip("{")
        out(f, " ", attr, '="', htmlentities(x), '"')
    if not list(tag.children) and tag.name in [
        "meta",
        "input",
        "br",
        "hr",
        "link",
        "img",
    ]:
        out(f, "/>")
        return
    out(f, ">")

    for ch in tag.children:
        if (
            tag.name == "script"
            and tag.attrs.get("type") == "application/ld+json"
        ):
            out(f, json.dumps(json.loads(tag.string), separators=(",", ":")))
        elif tag.name == "style":
            out(f, sassc(tag.string))
        else:
            output_elem(
                f,
                ch,
                ws
                or tag.name in ["textarea", "script", "style", "pre"]
                or "pre-wrap" in tag.attrs.get("style", ""),
                tag.name not in ["script", "style"],
            )

    out(f, "</", tag.name, ">")


def minify_path(p):
    with Path(p).open("r") as f:
        orig = f.read()
        soup = BeautifulSoup(orig, "html5lib")
        with Path(p).open("w") as f:
            out(f, "<!DOCTYPE html>")
            output_elem(f, soup.html)


for p in sys.argv[1:]:
    minify_path(p)
